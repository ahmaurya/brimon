<?xml version="1.0" ?><interfacedef loc="46:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc" nicename="tos.lib.timer.Counter" qname="Counter">
      <documentation loc="25:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc">
        <short>
 A Counter counts time in some units and in some width, signaling
 overflow.</short>
        <long>
 A Counter counts time in some units and in some width, signaling
 overflow.

 &lt;p&gt;A Counter is parameterised by its &quot;precision&quot; (milliseconds,
 microseconds, etc), identified by a type. This prevents, e.g.,
 unintentionally mixing components expecting milliseconds with those
 expecting microseconds as those interfaces have a different type.

 &lt;p&gt;A Counter's second parameter is its &quot;width&quot;, i.e., the number of
 bits used to represent time values. Width is indicated by including
 the appropriate size integer type as a Counter parameter.

 &lt;p&gt;See TEP102 for more details.

 @param precision_tag A type indicating the precision of this Counter.
 @param size_type An integer type representing time values for this Counter.

 @author Cory Sharp &lt;cssharp@eecs.berkeley.edu&gt;
</long>
      </documentation>
      <parameters>
        <typedef loc="46:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc" name="precision_tag" ref="0x2b3677670b20">
          <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
          <type-var alignment="U:" size="U:"><typedef-ref name="precision_tag" ref="0x2b3677670b20" scoped=""/></type-var>
        </typedef>
        <typedef loc="46:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc" name="size_type" ref="0x2b3677670d50">
          <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
          <type-var alignment="U:" size="U:"><typedef-ref name="size_type" ref="0x2b3677670d50" scoped=""/></type-var>
        </typedef>
      </parameters>
      <function command="" loc="53:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc" name="get" provided="0" ref="0x2b367766d620">
        <documentation loc="48:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc">
          <short> 
 Return counter value.</short>
          <long> 
 Return counter value. Counters start at boot - some time sources may
 stop counting while the processor is in low-power mode.
 @return Current counter value.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
        <type-function alignment="I:1" size="I:1">
          <type-var alignment="U:" size="U:"><typedef-ref name="size_type" ref="0x2b3677670d50" scoped=""/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="65:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc" name="clearOverflow" provided="0" ref="0x2b367766c688">
        <documentation loc="62:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc">
          <short>
 Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="60:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc" name="isOverflowPending" provided="0" ref="0x2b367766de38">
        <documentation loc="55:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc">
          <short> 
 Return TRUE if an overflow event will occur after the outermost atomic
 block is exits.</short>
          <long> 
 Return TRUE if an overflow event will occur after the outermost atomic
 block is exits.  FALSE otherwise.
 @return Counter pending overflow status.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="bool" ref="0x2b3676bf7178"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" loc="71:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc" name="overflow" provided="0" ref="0x2b367766cd78">
        <documentation loc="67:/home/ahmaurya/Dropbox/Courses/CS691/brimon/tinyos-2.1.1/tos/lib/timer/Counter.nc">
          <short>
 Signals that the current time has overflowed.</short>
          <long>
 Signals that the current time has overflowed.  That is, the current
 time has wrapped around from its maximum value to zero.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
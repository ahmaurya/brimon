#include "Timer.h"
#include "CC2420.h"
#include "printf.h"
#include "IEEE802154.h"
#include "UserButton.h"
#include "pipeline.h"

module LoggerM {
  provides interface Logger;
  uses {
    interface SplitControl as Control;
    interface SplitControl as RadioControl;
    interface Leds;

    interface Timer<TMilli> as Timer0;
    interface Timer<TMilli> as Timer1;    

    interface CC2420Config;

    interface CC2420PacketBody;       
    interface PacketAcknowledgements;

    interface Notify<button_state_t> as UB;
    interface Alarm<T32khz,uint32_t> as Alarm;    
    /**SB: Modifying logger to use PIPMac interface**/
    interface PIPMac;
    
  }
}

implementation {

  /* Format of log packet sent over radio. Only diff from Log is
     seqno is added. */
  typedef nx_struct RadioLog {
    nxle_uint32_t time;
    nxle_uint32_t value;
    nxle_uint8_t type;
    nxle_uint32_t seqno;
  } RadioLog;
  bool busy = FALSE;  	
  uint8_t last_entry_ind=0;
  uint32_t entry_number=0;
  message_t pkt;
  message_t *pktptr;
  uint8_t retryCount=0;
  uint8_t im_sending=0;
  uint32_t send_count; // How many log entries have been sent so far?
  bool wrap_around=FALSE;
  bool first_time=TRUE;
	
  inline bool shouldLog(uint8_t type) {
    if(pip_state == PIP_S_SEND_LOG) { return FALSE; }
    if((TOS_NODE_ID != SRC) && (TOS_NODE_ID != DEST)) {
      return (type < SHOULD_LOG_END);
    } else {
      return (type <= TRANSPORT_DEBUG);
    }
  } // End shouldLog()

  error_t Logger_logData_helper(uint8_t type, uint32_t value);
  async command error_t Logger.logData(uint8_t type, uint32_t value) {
    atomic { return Logger_logData_helper(type, value); }
  }
  error_t Logger_logData_helper(uint8_t type, uint32_t value) {
    if(shouldLog(type) && (type < STAT_END)) {
      statLog[type].type = type;
      statLog[type].value = value;
      statLog[type].time = call Alarm.getNow();
      return SUCCESS;
    }
    if(shouldLog(type)) {
      last_entry_ind = (logcounter % MAX_LOG_ENTRIES);
      logArray[last_entry_ind].type = type;
      logArray[last_entry_ind].value = value;
      logArray[last_entry_ind].time = call Alarm.getNow();
      logcounter++;
      if(logcounter >= MAX_LOG_ENTRIES){ wrap_around = TRUE; }
    }
    return(SUCCESS);
  } // End Logger_logData_helper()

  error_t Logger_sendLog_helper();
  async command error_t Logger.sendLog() {
    atomic { return Logger_sendLog_helper(); }
  }
  error_t Logger_sendLog_helper() {
    if(wrap_around){ send_count=last_entry_ind+1; entry_number=logcounter-MAX_LOG_ENTRIES;}
    else{send_count=0;entry_number=0;}
  
    if(wrap_around) 
      printf("WR %lu %d ", logcounter, last_entry_ind);
    else
      printf("NWR %lu %d", logcounter, last_entry_ind);
    printfflush();

    first_time = TRUE;

    call Timer0.startOneShot(10); //((TOS_NODE_ID-1)*5000);
    return(SUCCESS);
  } // End Logger_sendLog_helper()

  event void RadioControl.startDone(error_t error) {    
  } // End RadioControl.startDone()

  async command error_t Logger.dumpLog() {
    if(wrap_around){ send_count=last_entry_ind+1; entry_number=logcounter-MAX_LOG_ENTRIES;}
    else{send_count=0;entry_number=0;}
    
    if (wrap_around) 
      printf("WR %lu %d ",logcounter ,last_entry_ind);
    else
      printf(" NWR %lu %d", logcounter, last_entry_ind);
    printfflush();
 
    first_time=TRUE;
    call Timer1.startOneShot(50);
    return SUCCESS;
  } // End Logger.dumpLog()

  void Timer1_fired_helper();
  event void Timer1.fired() {
    atomic { Timer1_fired_helper(); }
  }
  void Timer1_fired_helper() {
    Log toPrint;      

    if(!wrap_around && send_count>=logcounter+NUM_STAT_ENTRIES) {
      /** Reset the state **/ 
      call Timer1.startOneShot(7000);
      send_count=0;
      entry_number=0;
      printf("DONE ");  
      printfflush();
      return;
    }
    if(wrap_around && send_count >= MAX_LOG_ENTRIES+NUM_STAT_ENTRIES) {send_count=NUM_STAT_ENTRIES;}
    
    if(!wrap_around && send_count < NUM_STAT_ENTRIES) { toPrint = statLog[send_count]; }
    else if(wrap_around && first_time &&  send_count<last_entry_ind+NUM_STAT_ENTRIES+1 && send_count>=last_entry_ind+1){toPrint = statLog[send_count-last_entry_ind-1];}
    else { toPrint = logArray[send_count-NUM_STAT_ENTRIES]; }

    if(wrap_around && first_time &&  send_count==last_entry_ind+1) {printf("\n");}
    else if (!wrap_around && send_count==0){ printf("\n");}
    
    printf("%d %lu %d %lu %lu\n", TOS_NODE_ID, entry_number, toPrint.type, toPrint.value, toPrint.time);
    entry_number++;
    
    call Leds.set(send_count%8);
    send_count++;
    if(wrap_around && send_count==last_entry_ind+NUM_STAT_ENTRIES+1 && !first_time) {
      
      printf("DONE"); 
      printfflush();
      // retransmit
      if(wrap_around){ send_count=last_entry_ind+1;}
      else{send_count=0;}    
      entry_number=logcounter-MAX_LOG_ENTRIES; 
      first_time=TRUE; 
      call Timer1.startOneShot(7000);
      return;
    }      
    if(first_time && (send_count==last_entry_ind+NUM_STAT_ENTRIES+1))
      first_time=FALSE;
    call Timer1.startOneShot(50); // Print with 50ms gap
  } // End Timer1_fired_helper()

  void Timer0_fired_helper();
  event void Timer0.fired() {
    atomic { Timer0_fired_helper(); }
  }
  void Timer0_fired_helper() {
    RadioLog *data;
    
    cc2420_header_t * header;
    pktptr = (message_t *) &pkt;
    //printf("FIRED");
    if(busy) {
      // call Send.cancel(pktptr);
      busy=FALSE;
    }
    data= (RadioLog *)  pktptr->data;
    
    data = (RadioLog *) pktptr->data;

    
    if(!wrap_around && send_count < NUM_STAT_ENTRIES) { 
      data->type=statLog[send_count].type;
      data->value=statLog[send_count].value;
      data->time=statLog[send_count].time;    
    }
    else if(wrap_around && first_time &&  send_count<last_entry_ind+NUM_STAT_ENTRIES+1 && send_count>=last_entry_ind+1){    
      data->type=statLog[send_count-last_entry_ind-1].type;
      data->value=statLog[send_count-last_entry_ind-1].value;
      data->time=statLog[send_count-last_entry_ind-1].time;    
    }
    else {
      data->type=logArray[send_count-NUM_STAT_ENTRIES].type;
      data->value=logArray[send_count-NUM_STAT_ENTRIES].value;
      data->time=logArray[send_count-NUM_STAT_ENTRIES].time;    
    }
    data->seqno=entry_number;
    header = call CC2420PacketBody.getHeader( pktptr );
    header->dest= LOG_COLLECTOR;
    header->destpan=LOG_COLLECTOR;  
    header->src=TOS_NODE_ID; 

    call Leds.set(7); 
    
    if (call PIPMac.sendData(pktptr,sizeof(RadioLog))  == SUCCESS) {
      busy = TRUE;
      call Leds.set(send_count%8);
      im_sending=1;
    } else {
      printf("Send.send() failed");
      printfflush();
      call Timer0.startOneShotAt(0, 30);	
      busy = FALSE;      
    }

  } // End Timer0_fired_helper()

  event void RadioControl.stopDone(error_t error) {		
  } // End RadioControl.stopDone()

  event void Control.startDone(error_t err) {
    uint8_t i;
    atomic {
      send_count = 0;
      for(i = 0; i < NUM_STAT_ENTRIES; i++) {
	statLog[i].type = STAT_END;
	statLog[i].value = 0;
	statLog[i].time = 0;
      }
    }
  }

  event void Control.stopDone(error_t err) {}
 
  event void CC2420Config.syncDone(error_t error) {}

  async command error_t Logger.listenToDefaultChannel() {
    call CC2420Config.setAddressRecognition(TRUE, TRUE);
    call CC2420Config.setPanAddr(TOS_NODE_ID);
    call CC2420Config.setChannel(PIP_DEFAULT_CHANNEL);
    call CC2420Config.sync();
    call Leds.set(7);
    return SUCCESS;
  } // End Logger.listenToDefaultChannel();

  void UB_notify_helper(button_state_t val);
  event void UB.notify(button_state_t val) {
    atomic { UB_notify_helper(val); }
  }
  void UB_notify_helper(button_state_t val) {
    if(val) {
      call Leds.led1Toggle();
      send_count=0;
      if(RADIO_LOG_SEND==0)
	call Logger.dumpLog(); // Send over serial 
      else
	call Logger.sendLog(); // Send over Radio
    }		
  } // End UB_notify_helper()

  async command error_t Logger.init() {
    call UB.enable();
    return SUCCESS;
  } // End Logger.init()

  async event void Alarm.fired() {}

  /**SB: Implement all the PIPMac interfaces**/
  async event void PIPMac.startDone(){}
  async event void PIPMac.incomingConnRequest(message_t *msg, uint8_t length){}
  async event void PIPMac.incomingData(message_t *msg, uint8_t length){
    nxle_uint8_t * data;
    if(pip_state != PIP_S_SEND_LOG) { return; /*SB:This is PIP data*/ }
    //  SB:log query
    call Leds.set(0);
    pktptr = msg;
    data = (nxle_uint8_t *) pktptr->data;
    if(*data==55 && *(data+1)==55){ // this is query pkt
      sending_log=TRUE;
      call Logger.sendLog();
    }
  } // End PIPMac.incomingData()
  async event void PIPMac.incomingEOF(message_t *msg, uint8_t length){}
  async event void PIPMac.incomingSNACK(message_t *msg, uint8_t length){}
  async event void PIPMac.incomingTeardown(message_t *msg, uint8_t length){}
  async event void PIPMac.sendConnRequestDone(message_t *msg, error_t status){}
  
  void PIPMac_sendDataDone_helper(message_t *msg, error_t error);
  async event void PIPMac.sendDataDone(message_t *msg, error_t status){
    if(pip_state==PIP_S_SEND_LOG){
      atomic { PIPMac_sendDataDone_helper(msg, status); }
    }
  }
  
  void PIPMac_sendDataDone_helper(message_t *msg, error_t error) {
    if(im_sending==1) {
      retryCount++;
      if(retryCount==2){
	send_count++;
	if(!wrap_around && send_count>=logcounter+NUM_STAT_ENTRIES) {
	  send_count=0; 
	  entry_number=0;
	  retryCount=0;
	  sending_log=FALSE;
	  return;
	}
	if(wrap_around && send_count >= MAX_LOG_ENTRIES+NUM_STAT_ENTRIES) {send_count=NUM_STAT_ENTRIES;}

	entry_number++;
	retryCount=0;
	call Leds.set(0);
	if(wrap_around && send_count==last_entry_ind+NUM_STAT_ENTRIES+1 && !first_time) {
	  retryCount=0;
	  sending_log=FALSE;
	  if(wrap_around){ send_count=last_entry_ind+1;}
	  else{send_count=0;}    
	  entry_number=logcounter-MAX_LOG_ENTRIES; 
	  first_time=TRUE; 
	  call Leds.set(4);
	  return;
	}      
	if( first_time &&  send_count==last_entry_ind+NUM_STAT_ENTRIES+1) {first_time=FALSE;}
      }// END if(retryCount
      busy = FALSE;    
      call Timer0.startOneShot(10);	// Send with 10 ms gap
    }
    
  } // End Send_sendDone_helper()
  
  async event void PIPMac.sendEOFDone(message_t *msg, error_t status){}
  async event void PIPMac.sendSNACKDone(message_t *msg, error_t status){}
  async event void PIPMac.sendTeardownDone(message_t *msg, error_t status){}



} // End implementation
